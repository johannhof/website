var searchIndex = {};
searchIndex['amethyst'] = {"items":[[11,"fmt","amethyst_ecs::dynvec","",0,{"inputs":[{"name":"dynvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new dynamically typed vector of type T",0,{"inputs":[{"name":"dynvec"}],"output":{"name":"dynvec"}}],[11,"get_component","","Returns a ref to ith component in the vector\n# Panics\nPanics if the type T does not match with the vector's type",0,{"inputs":[{"name":"dynvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_component_mut","","Returns a mutable ref to ith component in the vector\n# Panics\nPanics if the type T does not match with the vector's type",0,{"inputs":[{"name":"dynvec"},{"name":"usize"}],"output":{"name":"option"}}],[11,"add","","Adds a new element and returns its index\n# Panics\nPanics if the type T does not match with the vector's type",0,{"inputs":[{"name":"dynvec"},{"name":"t"}],"output":{"name":"usize"}}],[11,"remove","","Removes an element",0,null],[11,"fmt","amethyst_ecs::entity","",1,{"inputs":[{"name":"entities"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new entity manager.",1,{"inputs":[{"name":"entities"}],"output":{"name":"entities"}}],[11,"create","","Creates a new entity and returns its handle.",1,{"inputs":[{"name":"entities"}],"output":{"name":"u64"}}],[11,"is_alive","","Checks whether the given entity is alive.",1,{"inputs":[{"name":"entities"},{"name":"u64"}],"output":{"name":"bool"}}],[11,"num_alive","","Checks how many entities are currently in the world.",1,{"inputs":[{"name":"entities"}],"output":{"name":"usize"}}],[11,"destroy","","Destroys the given entity.",1,null],[11,"new","amethyst_ecs::sim","Creates an empty simulation.",2,{"inputs":[{"name":"simulation"}],"output":{"name":"simulation"}}],[11,"build","","Creates an initialized simulation using the [builder pattern][bp].",2,{"inputs":[{"name":"simulation"}],"output":{"name":"simbuilder"}}],[11,"add_processor","","Adds a new processor to the simulation.",2,{"inputs":[{"name":"simulation"},{"name":"t"}],"output":{"name":"result"}}],[11,"step","","Computes the next state of the world using the given processors.",2,{"inputs":[{"name":"simulation"},{"name":"world"}],"output":{"name":"world"}}],[11,"new","","Starts building a new simulation.",3,{"inputs":[{"name":"simbuilder"}],"output":{"name":"simbuilder"}}],[11,"with","","Add a given processor to the simulation.",3,{"inputs":[{"name":"simbuilder"},{"name":"t"}],"output":{"name":"simbuilder"}}],[11,"done","","Returns the newly-built simulation or a list of any errors the\nprocessors may have encountered.",3,{"inputs":[{"name":"simbuilder"}],"output":{"name":"result"}}],[11,"fmt","amethyst_ecs::world","",4,{"inputs":[{"name":"world"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty world.",4,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"create_entity","","Creates a new entity in the world and returns a handle to it.",4,{"inputs":[{"name":"world"}],"output":{"name":"u64"}}],[11,"destroy_entity","","Destroys a given entity and removes its components.",4,null],[11,"insert_component","","Attaches a component to an entity and returns the component's index.",4,{"inputs":[{"name":"world"},{"name":"u64"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove_component","","",4,null],[11,"remove_component_type","","",4,null],[11,"component","","Returns ith component of selected type",4,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"option"}}],[11,"component_mut","","Returns ith mutable component of selected type",4,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"option"}}],[6,"Entity","amethyst::ecs","",null,null],[8,"Processor","","The trait implemented by all processors.",null,null],[10,"process","","TODO: Need to finalize API design here, according to [issue #10].",5,null],[6,"ProcessorResult","","",null,null],[3,"Simulation","","",null,null],[3,"SimBuilder","","Consuming builder for easily constructing a new simulations.",null,null],[3,"World","","A collection of entities and their respective components.",null,null],[11,"new","amethyst_engine::app","Creates a new Application with the given initial game state.",6,{"inputs":[{"name":"application"},{"name":"t"}],"output":{"name":"application"}}],[11,"run","","Starts the application and manages the game loop.",6,null],[11,"new","amethyst_engine::state","",7,{"inputs":[{"name":"statemachine"},{"name":"t"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",7,{"inputs":[{"name":"statemachine"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.\n# Panics\nPanics if no states are present in the stack.",7,null],[11,"handle_events","","Passes a vector of events to the active state to handle.",7,null],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",7,null],[11,"update","","Updates the currently active state immediately.",7,null],[11,"new","amethyst_engine::timing","",8,{"inputs":[{"name":"stopwatch"}],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",8,{"inputs":[{"name":"stopwatch"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",8,null],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been\nstarted and stopped before, the new results are compounded onto the\nexisting elapsed time value.",8,null],[11,"stop","","Stops measuring elapsed time.",8,null],[11,"reset","","Clears the current elapsed time value.",8,null],[3,"Application","amethyst::engine","User-friendly facade for building games. Manages main loop.",null,null],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",9,null],[11,"on_stop","","Executed when the game state exits.",9,null],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",9,null],[11,"on_resume","","Executed when the application returns to this game state once again.",9,null],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",9,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",9,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",9,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",10,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",10,null],[13,"Push","","Pause the active state and push a new state onto the stack.",10,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",10,null],[13,"Quit","","Stop and remove all states and shut down the engine.",10,null],[3,"Stopwatch","","Useful utility for accurately measuring elapsed time.",null,null],[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",11,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",11,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",11,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",11,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",11,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",11,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",11,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",11,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",11,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",11,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","time","",12,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",11,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",11,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",11,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",11,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",11,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",11,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",13,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",13,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"fmt","time::sys::inner::unix","",14,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","",14,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"sub","","",14,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",14,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",14,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",14,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"cmp","","",14,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",14,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"hash","time","",15,null],[11,"fmt","","",15,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",15,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",15,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",15,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",15,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",16,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",16,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",16,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",17,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",17,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",17,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",17,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",17,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",17,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",18,null],[11,"fmt","","",18,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",18,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",18,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",18,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",18,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",18,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",18,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",18,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",18,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",18,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",18,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",18,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",18,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",18,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",18,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",19,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",12,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"fmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","amethyst::engine","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[11,"new","amethyst_renderer::frame","Creates an empty frame.",21,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"build","","Creates an initialized frame using the [builder pattern][bp].",21,{"inputs":[{"name":"frame"}],"output":{"name":"framebuilder"}}],[11,"new","amethyst_renderer::backend","Creates a new renderer backend.",22,{"inputs":[{"name":"backend"}],"output":{"name":"backend"}}],[11,"submit","","",22,null],[11,"new","amethyst_renderer::frame","Starts building a new frame.",23,{"inputs":[{"name":"framebuilder"}],"output":{"name":"framebuilder"}}],[11,"done","","Returns the newly-built frame.",23,{"inputs":[{"name":"framebuilder"}],"output":{"name":"frame"}}],[11,"new","amethyst_renderer::frontend","Creates a new rendering engine.",24,{"inputs":[{"name":"renderer"},{"name":"pipeline"}],"output":{"name":"renderer"}}],[11,"new_deferred","","Creates a new rendering engine with a deferred pipeline.",24,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"new_forward","","Creates a new rendering engine with a forward pipeline.",24,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"draw","","Draws a frame with the currently set render pipeline.",24,null],[11,"fmt","amethyst_renderer::pipeline::stage","",25,{"inputs":[{"name":"step"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",26,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Defines a new pipeline stage and assigns it a descriptive name.",26,{"inputs":[{"name":"stage"},{"name":"str"}],"output":{"name":"stage"}}],[11,"fmt","amethyst_renderer::pipeline","",27,{"inputs":[{"name":"pipeline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty pipeline and assigns it a descriptive name.",27,{"inputs":[{"name":"pipeline"},{"name":"str"}],"output":{"name":"pipeline"}}],[11,"build","","",27,{"inputs":[{"name":"pipeline"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"new","","",28,{"inputs":[{"name":"pipelinebuilder"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"new_stage","","",28,{"inputs":[{"name":"pipelinebuilder"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"done","","",28,{"inputs":[{"name":"pipelinebuilder"}],"output":{"name":"pipeline"}}],[3,"Frame","amethyst::renderer","Holds frame-specific data that is consumed by the frontend.",null,null],[3,"FrameBuilder","","Consuming builder for easily constructing a new frame.",null,null],[3,"Renderer","","A simple renderer frontend. Accepts a `Pipeline` on startup, and parses\n`Frame`s.",null,null],[3,"Pipeline","","A set of stages that describes how to draw a frame.",null,null],[12,"name","","",27,null],[12,"stages","","",27,null],[3,"PipelineBuilder","","",null,null],[3,"Stage","","A set of steps that accomplishes some task in the rendering pipeline.",null,null],[12,"name","","",26,null],[12,"steps","","",26,null],[4,"Step","","A single, atomic rendering operation.",null,null],[13,"ClearTarget","","Clears the current render target.",25,null],[12,"buffers","amethyst::renderer::Step","",25,null],[12,"value","","",25,null],[13,"DrawObjects","amethyst::renderer","Draws all objects in the scene.",25,null],[13,"UseTarget","","Selects a render target to write to. If the given string is empty\n(`\"\"`), we render directly to the window surface.",25,null]],"paths":[[3,"DynVec"],[3,"Entities"],[3,"Simulation"],[3,"SimBuilder"],[3,"World"],[8,"Processor"],[3,"Application"],[3,"StateMachine"],[3,"Stopwatch"],[8,"State"],[4,"Trans"],[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"SteadyTime"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Fmt"],[3,"Frame"],[3,"Backend"],[3,"FrameBuilder"],[3,"Renderer"],[4,"Step"],[3,"Stage"],[3,"Pipeline"],[3,"PipelineBuilder"]]};
searchIndex['amethyst_renderer'] = {"items":[[3,"Frame","amethyst_renderer","Holds frame-specific data that is consumed by the frontend.",null,null],[3,"FrameBuilder","","Consuming builder for easily constructing a new frame.",null,null],[3,"Renderer","","A simple renderer frontend. Accepts a `Pipeline` on startup, and parses\n`Frame`s.",null,null],[3,"Pipeline","","A set of stages that describes how to draw a frame.",null,null],[12,"name","","",0,null],[12,"stages","","",0,null],[3,"PipelineBuilder","","",null,null],[3,"Stage","","A set of steps that accomplishes some task in the rendering pipeline.",null,null],[12,"name","","",1,null],[12,"steps","","",1,null],[4,"Step","","A single, atomic rendering operation.",null,null],[13,"ClearTarget","","Clears the current render target.",2,null],[12,"buffers","amethyst_renderer::Step","Which buffers to clear. Possible values: \"all\", \"color\", \"stencil\".",2,null],[12,"value","","The RGBA value to clear the buffers with. If `None`, this will\ndefault to `[0.0; 4]`.",2,null],[13,"DrawObjects","amethyst_renderer","Draws all objects in the scene.",2,null],[13,"UseTarget","","Selects a render target to write to. If the given string is empty\n(`\"\"`), we render directly to the window surface.",2,null],[11,"new","","Creates an empty frame.",3,{"inputs":[{"name":"frame"}],"output":{"name":"frame"}}],[11,"build","","Creates an initialized frame using the [builder pattern][bp].",3,{"inputs":[{"name":"frame"}],"output":{"name":"framebuilder"}}],[11,"new","","Starts building a new frame.",4,{"inputs":[{"name":"framebuilder"}],"output":{"name":"framebuilder"}}],[11,"done","","Returns the newly-built frame.",4,{"inputs":[{"name":"framebuilder"}],"output":{"name":"frame"}}],[11,"new","","Creates a new rendering engine.",5,{"inputs":[{"name":"renderer"},{"name":"pipeline"}],"output":{"name":"renderer"}}],[11,"new_deferred","","Creates a new rendering engine with a deferred pipeline.",5,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"new_forward","","Creates a new rendering engine with a forward pipeline.",5,{"inputs":[{"name":"renderer"}],"output":{"name":"renderer"}}],[11,"draw","","Draws a frame with the currently set render pipeline.",5,{"inputs":[{"name":"renderer"},{"name":"frame"}],"output":null}],[11,"fmt","","",2,{"inputs":[{"name":"step"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"stage"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Defines a new pipeline stage and assigns it a descriptive name.",1,{"inputs":[{"name":"stage"},{"name":"str"}],"output":{"name":"stage"}}],[11,"fmt","","",0,{"inputs":[{"name":"pipeline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates an empty pipeline and assigns it a descriptive name.",0,{"inputs":[{"name":"pipeline"},{"name":"str"}],"output":{"name":"pipeline"}}],[11,"build","","",0,{"inputs":[{"name":"pipeline"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"new","","",6,{"inputs":[{"name":"pipelinebuilder"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"new_stage","","",6,{"inputs":[{"name":"pipelinebuilder"},{"name":"str"}],"output":{"name":"pipelinebuilder"}}],[11,"done","","",6,{"inputs":[{"name":"pipelinebuilder"}],"output":{"name":"pipeline"}}]],"paths":[[3,"Pipeline"],[3,"Stage"],[4,"Step"],[3,"Frame"],[3,"FrameBuilder"],[3,"Renderer"],[3,"PipelineBuilder"]]};
searchIndex['amethyst_engine'] = {"items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"duration"},{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"duration"},{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","time","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","time::duration","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"fmt","time::sys::inner::unix","",3,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","",3,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"sub","","",3,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",3,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",3,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"cmp","","",3,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",3,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"hash","time","",4,null],[11,"fmt","","",4,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",4,{"inputs":[{"name":"timespec"},{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",4,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",4,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",4,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",5,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",5,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",6,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"fmt","","",6,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",6,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",7,null],[11,"fmt","","",7,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",7,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",7,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",7,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",7,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",7,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",7,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",7,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",7,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",7,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",7,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",7,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",7,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",7,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",8,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",8,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"fmt"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","amethyst_engine","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Application","","User-friendly facade for building games. Manages main loop.",null,null],[3,"StateMachine","","A simple stack-based state machine (pushdown automaton).",null,null],[3,"Stopwatch","","Useful utility for accurately measuring elapsed time.",null,null],[4,"Trans","","Types of state transitions.",null,null],[13,"None","","Continue as normal.",10,null],[13,"Pop","","Remove the active state and resume the next state on the stack or stop if there are none.",10,null],[13,"Push","","Pause the active state and push a new state onto the stack.",10,null],[13,"Switch","","Remove the current state on the stack and insert a different one.",10,null],[13,"Quit","","Stop and remove all states and shut down the engine.",10,null],[11,"new","","Creates a new Application with the given initial game state.",11,{"inputs":[{"name":"application"},{"name":"t"}],"output":{"name":"application"}}],[11,"run","","Starts the application and manages the game loop.",11,{"inputs":[{"name":"application"}],"output":null}],[11,"new","","",12,{"inputs":[{"name":"statemachine"},{"name":"t"}],"output":{"name":"statemachine"}}],[11,"is_running","","Checks whether the state machine is running.",12,{"inputs":[{"name":"statemachine"}],"output":{"name":"bool"}}],[11,"start","","Initializes the state machine.\n# Panics\nPanics if no states are present in the stack.",12,{"inputs":[{"name":"statemachine"}],"output":null}],[11,"handle_events","","Passes a vector of events to the active state to handle.",12,null],[11,"fixed_update","","Updates the currently active state at a steady, fixed interval.",12,{"inputs":[{"name":"statemachine"},{"name":"duration"}],"output":null}],[11,"update","","Updates the currently active state immediately.",12,{"inputs":[{"name":"statemachine"},{"name":"duration"}],"output":null}],[11,"new","","",13,{"inputs":[{"name":"stopwatch"}],"output":{"name":"stopwatch"}}],[11,"elapsed","","Retrieves the elapsed time.",13,{"inputs":[{"name":"stopwatch"}],"output":{"name":"duration"}}],[11,"restart","","Stops, resets, and starts the stopwatch again.",13,{"inputs":[{"name":"stopwatch"}],"output":null}],[11,"start","","Starts, or resumes, measuring elapsed time. If the stopwatch has been\nstarted and stopped before, the new results are compounded onto the\nexisting elapsed time value.",13,{"inputs":[{"name":"stopwatch"}],"output":null}],[11,"stop","","Stops measuring elapsed time.",13,{"inputs":[{"name":"stopwatch"}],"output":null}],[11,"reset","","Clears the current elapsed time value.",13,{"inputs":[{"name":"stopwatch"}],"output":null}],[8,"State","","A trait which defines game states that can be used by the state machine.",null,null],[11,"on_start","","Executed when the game state begins.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",14,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",14,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",14,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[11,"on_start","","Executed when the game state begins.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_stop","","Executed when the game state exits.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_pause","","Executed when a different game state is pushed onto the stack.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"on_resume","","Executed when the application returns to this game state once again.",14,{"inputs":[{"name":"state"}],"output":null}],[11,"handle_events","","Executed on every frame before updating, for use in reacting to events.",14,null],[11,"fixed_update","","Executed repeatedly at stable, predictable intervals (1/60th of a second\nby default).",14,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}],[11,"update","","Executed on every frame immediately, as fast as the engine will allow.",14,{"inputs":[{"name":"state"},{"name":"duration"}],"output":{"name":"trans"}}]],"paths":[[3,"Duration"],[3,"TmFmt"],[3,"OutOfRangeError"],[3,"SteadyTime"],[3,"Timespec"],[3,"PreciseTime"],[3,"SteadyTime"],[3,"Tm"],[4,"ParseError"],[4,"Fmt"],[4,"Trans"],[3,"Application"],[3,"StateMachine"],[3,"Stopwatch"],[8,"State"]]};
searchIndex['amethyst_ecs'] = {"items":[[3,"Simulation","amethyst_ecs","",null,null],[3,"SimBuilder","","Consuming builder for easily constructing a new simulations.",null,null],[3,"World","","A collection of entities and their respective components.",null,null],[11,"new","","Creates an empty simulation.",0,{"inputs":[{"name":"simulation"}],"output":{"name":"simulation"}}],[11,"build","","Creates an initialized simulation using the [builder pattern][bp].",0,{"inputs":[{"name":"simulation"}],"output":{"name":"simbuilder"}}],[11,"add_processor","","Adds a new processor to the simulation.",0,{"inputs":[{"name":"simulation"},{"name":"t"}],"output":{"name":"processorresult"}}],[11,"step","","Computes the next state of the world using the given processors.",0,{"inputs":[{"name":"simulation"},{"name":"world"}],"output":{"name":"world"}}],[11,"new","","Starts building a new simulation.",1,{"inputs":[{"name":"simbuilder"}],"output":{"name":"simbuilder"}}],[11,"with","","Add a given processor to the simulation.",1,{"inputs":[{"name":"simbuilder"},{"name":"t"}],"output":{"name":"simbuilder"}}],[11,"done","","Returns the newly-built simulation or a list of any errors the\nprocessors may have encountered.",1,{"inputs":[{"name":"simbuilder"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"world"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new empty world.",2,{"inputs":[{"name":"world"}],"output":{"name":"world"}}],[11,"create_entity","","Creates a new entity in the world and returns a handle to it.",2,{"inputs":[{"name":"world"}],"output":{"name":"entity"}}],[11,"destroy_entity","","Destroys a given entity and removes its components.",2,{"inputs":[{"name":"world"},{"name":"entity"}],"output":null}],[11,"insert_component","","Attaches a component to an entity and returns the component's index.",2,{"inputs":[{"name":"world"},{"name":"entity"},{"name":"t"}],"output":{"name":"option"}}],[11,"remove_component","","",2,{"inputs":[{"name":"world"},{"name":"entity"}],"output":null}],[11,"remove_component_type","","",2,{"inputs":[{"name":"world"},{"name":"typeid"},{"name":"entity"}],"output":null}],[11,"component","","Returns ith component of selected type",2,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"option"}}],[11,"component_mut","","Returns ith mutable component of selected type",2,{"inputs":[{"name":"world"},{"name":"usize"}],"output":{"name":"option"}}],[6,"Entity","","An unsigned 64-bit handle to an entity.",null,null],[6,"ProcessorResult","","The error type reported by SimBuilder if they fail to initialize.\nTODO: original note specified it was en error type reported by a **processor**,\nalthough, as seen below, Processor doesn't have any function to return an error,\nthus, only SimBuilder can return Result as of now.",null,null],[8,"Processor","","The trait implemented by all processors.",null,null],[10,"process","","TODO: Need to finalize API design here, according to [issue #10].",3,{"inputs":[{"name":"processor"}],"output":null}]],"paths":[[3,"Simulation"],[3,"SimBuilder"],[3,"World"],[8,"Processor"]]};
initSearch(searchIndex);
